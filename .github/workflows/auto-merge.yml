name: Auto Merge

on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  status: {}

jobs:
  automerge:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Retry Automerge Process (up to 2 times)
        id: retry_automerge
        run: |
          attempts=0
          max_attempts=2
          success=false

          # Run the automerge process in a loop
          while [ $attempts -lt $max_attempts ]; do
            attempts=$((attempts + 1))
            echo "Attempt #$attempts"

            # Ensure PR is mergeable
            pr_details=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable --jq .)
            echo "PR Details: $pr_details"
            mergeable=$(echo "$pr_details" | jq -r .mergeable)
            echo "Mergeable state: $mergeable"

            if [ "$mergeable" = "MERGEABLE" ]; then
              echo "Pull request is mergeable."
            elif [ "$mergeable" = "false" ]; then
              echo "Pull request is not mergeable."
              exit 1
            elif [ "$mergeable" = "null" ]; then
              echo "Mergeable state is unknown. Please check the PR status."
              exit 1
            else
              echo "Unexpected mergeable state: $mergeable"
              exit 1
            fi

            # Ensure required approvals
            pr_reviews=$(gh pr reviews ${{ github.event.pull_request.number }} --json state --jq '.[] | select(.state == "APPROVED")')
            approved_reviews_count=$(echo "$pr_reviews" | wc -l)
            required_approvals=1
            echo "Found $approved_reviews_count approvals."

            if [ "$approved_reviews_count" -ge "$required_approvals" ]; then
              echo "Required approvals received."
            else
              echo "Not enough approvals."
              exit 1
            fi

            # Automerge the PR
            pr_data=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable,mergeable_state --jq .)
            mergeable_state=$(echo "$pr_data" | jq -r .mergeable_state)

            if [ "$mergeable_state" = "clean" ]; then
              echo "PR is clean and ready for merging."
              gh pr merge ${{ github.event.pull_request.number }} --squash --admin --commit-title "Auto-merged by GitHub Actions"
              success=true
              break
            else
              echo "Mergeable state is not clean, state is $mergeable_state."
            fi

            # Sleep for a few seconds before retrying
            if [ $attempts -lt $max_attempts ]; then
              echo "Retrying after a short delay..."
              sleep 5
            fi
          done

          if [ "$success" = false ]; then
            echo "Failed to merge the pull request after $attempts attempts."
            exit 1
          fi
